"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunktykhe_electron_apps_roulette"] = self["webpackChunktykhe_electron_apps_roulette"] || []).push([["src_renderer_roulette_player_tykhe_bootstrap_components_Preloader_index_js"],{

/***/ "./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/index.js":
/*!************************************************************************************!*\
  !*** ./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @emotion/css */ \"./node_modules/@emotion/css/dist/emotion-css.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bowser */ \"./node_modules/bowser/es5.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bowser__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../components */ \"./src/renderer/roulette/player/tykhe/components/index.js\");\n/* harmony import */ var _hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../hooks */ \"./src/renderer/roulette/player/tykhe/hooks/index.js\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../theme */ \"./src/renderer/roulette/player/tykhe/bootstrap/theme/index.js\");\n/* harmony import */ var _style__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./style */ \"./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/style.js\");\n\n\n\n\n\n\n\n\nconst {\n  palette\n} = _theme__WEBPACK_IMPORTED_MODULE_5__.theme;\nconst isHandheld = (bowser__WEBPACK_IMPORTED_MODULE_2___default().mobile) || (bowser__WEBPACK_IMPORTED_MODULE_2___default().tablet);\nfunction Preloader(props) {\n  const {\n    image,\n    logo,\n    className,\n    background,\n    gameName,\n    poweredBy,\n    textColor = \"#dbdbdb\",\n    on,\n    playLabel,\n    onPlay,\n    onStart\n  } = props;\n  const [show, setShow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n  const preloaderHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const handleOnPlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    setShow(false);\n    onPlay();\n    preloaderHeader.current.addEventListener(\"transitionend\", function onPreloaderHide() {\n      onStart(); // TODO: consider using the `once` option for the event listener instead\n\n      preloaderHeader.current.removeEventListener(\"transitionend\", onPreloaderHide);\n    });\n  }, [onPlay, onStart]);\n  const preloadBackground = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.usePreloadImage)({\n    src: image\n  });\n  const preloadLogo = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.usePreloadImage)({\n    src: logo\n  });\n  const preloadPoweredByLogo = (0,_hooks__WEBPACK_IMPORTED_MODULE_4__.usePreloadImage)({\n    src: poweredBy && poweredBy.logo\n  });\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Container, {\n    className: (0,_emotion_css__WEBPACK_IMPORTED_MODULE_1__.cx)({\n      [_style__WEBPACK_IMPORTED_MODULE_6__.offState]: isHandheld ? !show && !on : !on,\n      [_style__WEBPACK_IMPORTED_MODULE_6__.mobileClassName]: isHandheld\n    }, className),\n    \"data-e2e\": \"preloader\",\n    style: {\n      color: textColor\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Header, {\n    innerRef: preloaderHeader,\n    style: {\n      background\n    }\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Image, {\n    style: {\n      backgroundColor: palette.primary,\n      ...(preloadBackground.loaded && {\n        backgroundImage: `url(${image})`\n      })\n    }\n  }), preloadLogo.loaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Logo, {\n    style: {\n      backgroundImage: `url(${logo})`\n    }\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.GameName, null, gameName)), isHandheld && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.MobileAnimationWrapper, null, on ? /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_3__.Spinner, {\n    color: textColor\n  }) : /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.PulseButton, {\n    onClick: handleOnPlay,\n    color: textColor\n  }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Message, null, playLabel))), !!poweredBy && preloadPoweredByLogo.loaded && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.PoweredBy, null, poweredBy.label, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n    alt: \"ezugi logo\",\n    src: poweredBy.logo\n  }))), !isHandheld && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_style__WEBPACK_IMPORTED_MODULE_6__.Footer, {\n    style: {\n      background,\n      backgroundColor: palette.primary\n    }\n  }, on && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement(_components__WEBPACK_IMPORTED_MODULE_3__.Spinner, {\n    color: textColor\n  })));\n}\nPreloader.propTypes = {\n  image: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  background: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  logo: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  gameName: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  poweredBy: (0,prop_types__WEBPACK_IMPORTED_MODULE_7__.shape)({\n    label: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n    logo: prop_types__WEBPACK_IMPORTED_MODULE_7__.string\n  }),\n  className: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  textColor: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  on: prop_types__WEBPACK_IMPORTED_MODULE_7__.bool,\n  onPlay: prop_types__WEBPACK_IMPORTED_MODULE_7__.func,\n  playLabel: prop_types__WEBPACK_IMPORTED_MODULE_7__.string,\n  onStart: prop_types__WEBPACK_IMPORTED_MODULE_7__.func\n};\nPreloader.defaultProps = {\n  onPlay: () => {},\n  onStart: () => {},\n  poweredBy: {}\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Preloader);\n\n//# sourceURL=webpack://tykhe-electron-apps-roulette/./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/index.js?");

/***/ }),

/***/ "./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/style.js":
/*!************************************************************************************!*\
  !*** ./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/style.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Container: () => (/* binding */ Container),\n/* harmony export */   Footer: () => (/* binding */ Footer),\n/* harmony export */   GameName: () => (/* binding */ GameName),\n/* harmony export */   Header: () => (/* binding */ Header),\n/* harmony export */   Image: () => (/* binding */ Image),\n/* harmony export */   Logo: () => (/* binding */ Logo),\n/* harmony export */   Message: () => (/* binding */ Message),\n/* harmony export */   MobileAnimationWrapper: () => (/* binding */ MobileAnimationWrapper),\n/* harmony export */   PoweredBy: () => (/* binding */ PoweredBy),\n/* harmony export */   PulseButton: () => (/* binding */ PulseButton),\n/* harmony export */   backgroundImageCover: () => (/* binding */ backgroundImageCover),\n/* harmony export */   fadeIn: () => (/* binding */ fadeIn),\n/* harmony export */   flexCenter: () => (/* binding */ flexCenter),\n/* harmony export */   mobileClassName: () => (/* binding */ mobileClassName),\n/* harmony export */   offState: () => (/* binding */ offState)\n/* harmony export */ });\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled/base */ \"./node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js\");\n/* harmony import */ var _emotion_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react */ \"./node_modules/@emotion/react/dist/emotion-react.browser.esm.js\");\n/* harmony import */ var _constants_es__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../constants/es */ \"./src/renderer/roulette/player/tykhe/constants/es/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils */ \"./src/renderer/roulette/player/tykhe/utils/index.js\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../theme */ \"./src/renderer/roulette/player/tykhe/bootstrap/theme/index.js\");\n\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__() { return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\"; }\n\n\n\n\nconst {\n  palette\n} = _theme__WEBPACK_IMPORTED_MODULE_3__.theme;\nconst TRANSITION_TIME = 0.6;\nconst FOOTER_HEIGHT = 30; // px\n\n// export var backgroundImageCover = /*#__PURE__*/css(\"background-size:cover;background-position:center;background-repeat:no-repeat;\");\n\nconst backgroundImageCover =  false ? 0 : {\n  name: \"1d2s86p-backgroundImageCover\",\n  styles: \"background-size:cover;background-position:center;background-repeat:no-repeat;label:backgroundImageCover;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n\n// export var fadeIn = /*#__PURE__*/keyframes(\"from{opacity:0;}to{opacity:1;}\");\n\nconst fadeIn = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.keyframes)`\n    from{opacity:0;}\n    to{opacity:1;}\n`;\n\n// export var flexCenter = /*#__PURE__*/css(\"justify-content:center;align-items:center;\");\n\nconst flexCenter =  false ? 0 : {\n  name: \"1njkksh-flexCenter\",\n  styles: \"justify-content:center;align-items:center;label:flexCenter;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n};\n// var onState = /*#__PURE__*/css(\"transition:transform \", TRANSITION_TIME, \"s ease-in-out,opacity \", TRANSITION_TIME, \"s ease-in-out;will-change:transform;transform:translateY(0);opacity:1;\");\n\nconst onState = /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.css)(\"transition:transform \", TRANSITION_TIME, \"s ease-in-out,opacity \", TRANSITION_TIME, \"s ease-in-out;will-change:transform;transform:translateY(0);opacity:1;\" + ( false ? 0 : \";label:onState;\"),  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\n// export var Header = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair0\"\n// })(\"width:100%;height:80%;display:flex;flex-flow:column;\", flexCenter, \";position:relative;\", onState, \";pointer-events:all;\");\n\nconst Header = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux79\",\n  label: \"Header\"\n})(\"width:100%;height:80%;display:flex;flex-flow:column;\", flexCenter, \";position:relative;\", onState, \";pointer-events:all;\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var mobileClassName = /*#__PURE__*/css(Header, \"{height:100%;}\");\n\nconst mobileClassName = /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.css)(\"width:100%;height:80%;display:flex;flex-flow:column;\", flexCenter, \";position:relative;\", onState, \";pointer-events:all;height:100%;\" + ( false ? 0 : \";label:mobileClassName;\"),  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\n// export var Message = /*#__PURE__*/styled(\"p\", {\n//   target: \"ebiaair1\"\n// })(\"font-size:26px;\");\n\nconst Message = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"p\",  false ? 0 : {\n  target: \"e1g8yux78\",\n  label: \"Message\"\n})( false ? 0 : {\n  name: \"4t4ja4\",\n  styles: \"font-size:26px\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVHlraGVcXGVsZWN0cm9uYXBwc1xcdHlraGUtZWxlY3Ryb24tYXBwcy1yb3VsZXR0ZVxcc3JjXFxyZW5kZXJlclxccm91bGV0dGVcXHBsYXllclxcdHlraGVcXGJvb3RzdHJhcFxcY29tcG9uZW50c1xcUHJlbG9hZGVyXFxzdHlsZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRStCIiwiZmlsZSI6IkM6XFxVc2Vyc1xcVHlraGVcXGVsZWN0cm9uYXBwc1xcdHlraGUtZWxlY3Ryb24tYXBwcy1yb3VsZXR0ZVxcc3JjXFxyZW5kZXJlclxccm91bGV0dGVcXHBsYXllclxcdHlraGVcXGJvb3RzdHJhcFxcY29tcG9uZW50c1xcUHJlbG9hZGVyXFxzdHlsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcywga2V5ZnJhbWVzIH0gZnJvbSBcIkBlbW90aW9uL3JlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcIkBlbW90aW9uL3N0eWxlZFwiO1xyXG5pbXBvcnQgeyBUQUJMRVRfTUlOX1dJRFRIIH0gZnJvbSAnLi4vLi4vLi4vY29uc3RhbnRzL2VzJztcclxuaW1wb3J0IHsgaGV4MnJnYmEgfSBmcm9tICcuLi8uLi8uLi91dGlscyc7XHJcbmltcG9ydCB7IHRoZW1lIH0gZnJvbSAnLi4vLi4vdGhlbWUnO1xyXG5jb25zdCB7XHJcbiAgcGFsZXR0ZVxyXG59ID0gdGhlbWU7XHJcbmNvbnN0IFRSQU5TSVRJT05fVElNRSA9IDAuNjtcclxuY29uc3QgRk9PVEVSX0hFSUdIVCA9IDMwOyAvLyBweFxyXG5cclxuLy8gZXhwb3J0IHZhciBiYWNrZ3JvdW5kSW1hZ2VDb3ZlciA9IC8qI19fUFVSRV9fKi9jc3MoXCJiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjpjZW50ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBiYWNrZ3JvdW5kSW1hZ2VDb3ZlciA9IGNzc2BcclxuICAgIGJhY2tncm91bmQtc2l6ZTpjb3ZlcjtcclxuICAgIGJhY2tncm91bmQtcG9zaXRpb246Y2VudGVyO1xyXG4gICAgYmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O1xyXG5gXHJcblxyXG4vLyBleHBvcnQgdmFyIGZhZGVJbiA9IC8qI19fUFVSRV9fKi9rZXlmcmFtZXMoXCJmcm9te29wYWNpdHk6MDt9dG97b3BhY2l0eToxO31cIik7XHJcblxyXG5leHBvcnQgY29uc3QgZmFkZUluID0ga2V5ZnJhbWVzYFxyXG4gICAgZnJvbXtvcGFjaXR5OjA7fVxyXG4gICAgdG97b3BhY2l0eToxO31cclxuYFxyXG5cclxuLy8gZXhwb3J0IHZhciBmbGV4Q2VudGVyID0gLyojX19QVVJFX18qL2NzcyhcImp1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBmbGV4Q2VudGVyID0gY3NzYFxyXG4gICAganVzdGlmeS1jb250ZW50OmNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOmNlbnRlcjtcclxuYFxyXG4vLyB2YXIgb25TdGF0ZSA9IC8qI19fUFVSRV9fKi9jc3MoXCJ0cmFuc2l0aW9uOnRyYW5zZm9ybSBcIiwgVFJBTlNJVElPTl9USU1FLCBcInMgZWFzZS1pbi1vdXQsb3BhY2l0eSBcIiwgVFJBTlNJVElPTl9USU1FLCBcInMgZWFzZS1pbi1vdXQ7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApO29wYWNpdHk6MTtcIik7XHJcblxyXG5jb25zdCBvblN0YXRlID0gY3NzYFxyXG4gICAgdHJhbnNpdGlvbjp0cmFuc2Zvcm0gJHtUUkFOU0lUSU9OX1RJTUV9cyBlYXNlLWluLW91dCxvcGFjaXR5ICR7VFJBTlNJVElPTl9USU1FfXMgZWFzZS1pbi1vdXQ7XHJcbiAgICB3aWxsLWNoYW5nZTp0cmFuc2Zvcm07XHJcbiAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTtcclxuICAgIG9wYWNpdHk6MTtcclxuYFxyXG5cclxuLy8gZXhwb3J0IHZhciBIZWFkZXIgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwiZGl2XCIsIHtcclxuLy8gICB0YXJnZXQ6IFwiZWJpYWFpcjBcIlxyXG4vLyB9KShcIndpZHRoOjEwMCU7aGVpZ2h0OjgwJTtkaXNwbGF5OmZsZXg7ZmxleC1mbG93OmNvbHVtbjtcIiwgZmxleENlbnRlciwgXCI7cG9zaXRpb246cmVsYXRpdmU7XCIsIG9uU3RhdGUsIFwiO3BvaW50ZXItZXZlbnRzOmFsbDtcIik7XHJcblxyXG5leHBvcnQgY29uc3QgSGVhZGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHdpZHRoOjEwMCU7XHJcbiAgICBoZWlnaHQ6ODAlO1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgZmxleC1mbG93OmNvbHVtbjtcclxuICAgICR7ZmxleENlbnRlcn07XHJcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcclxuICAgICR7b25TdGF0ZX07XHJcbiAgICBwb2ludGVyLWV2ZW50czphbGw7XHJcbmBcclxuXHJcbi8vIGV4cG9ydCB2YXIgbW9iaWxlQ2xhc3NOYW1lID0gLyojX19QVVJFX18qL2NzcyhIZWFkZXIsIFwie2hlaWdodDoxMDAlO31cIik7XHJcblxyXG5leHBvcnQgY29uc3QgbW9iaWxlQ2xhc3NOYW1lID0gY3NzYFxyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGhlaWdodDo4MCU7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWZsb3c6Y29sdW1uO1xyXG4gICAgJHtmbGV4Q2VudGVyfTtcclxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xyXG4gICAgJHtvblN0YXRlfTtcclxuICAgIHBvaW50ZXItZXZlbnRzOmFsbDtcclxuICAgIGhlaWdodDoxMDAlO1xyXG5gXHJcblxyXG4vLyBleHBvcnQgdmFyIE1lc3NhZ2UgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwicFwiLCB7XHJcbi8vICAgdGFyZ2V0OiBcImViaWFhaXIxXCJcclxuLy8gfSkoXCJmb250LXNpemU6MjZweDtcIik7XHJcblxyXG5leHBvcnQgY29uc3QgTWVzc2FnZSA9IHN0eWxlZC5wYFxyXG4gICAgZm9udC1zaXplOjI2cHg7XHJcbmBcclxuXHJcbi8vIGV4cG9ydCB2YXIgTW9iaWxlQW5pbWF0aW9uV3JhcHBlciA9IC8qI19fUFVSRV9fKi9zdHlsZWQoXCJkaXZcIiwge1xyXG4vLyAgIHRhcmdldDogXCJlYmlhYWlyMlwiXHJcbi8vIH0pKFwicG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOmNhbGMoXCIsIEZPT1RFUl9IRUlHSFQsIFwicHggKyAxMCUpO2Rpc3BsYXk6ZmxleDtcIiwgZmxleENlbnRlciwgXCI7ZmxleC1mbG93OmNvbHVtbiBub3dyYXA7QG1lZGlhIGFsbCBhbmQgKG9yaWVudGF0aW9uOmxhbmRzY2FwZSl7cG9zaXRpb246cmVsYXRpdmU7dG9wOlwiLCBGT09URVJfSEVJR0hULCBcInB4O2JvdHRvbTowO31cIik7XHJcblxyXG5leHBvcnQgY29uc3QgTW9iaWxlQW5pbWF0aW9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXHJcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICAgIGJvdHRvbTpjYWxjKCR7Rk9PVEVSX0hFSUdIVH1weCArIDEwJSk7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICAke2ZsZXhDZW50ZXJ9O1xyXG4gICAgZmxleC1mbG93OmNvbHVtbiBub3dyYXA7XHJcblxyXG4gICAgQG1lZGlhIGFsbCBhbmQgKG9yaWVudGF0aW9uOmxhbmRzY2FwZSl7XHJcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XHJcbiAgICAgICAgdG9wOiR7Rk9PVEVSX0hFSUdIVH1weDtcclxuICAgICAgICBib3R0b206MDtcclxuICAgIH1cclxuYFxyXG5cclxuLy8gZXhwb3J0IHZhciBGb290ZXIgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwiZGl2XCIsIHtcclxuLy8gICB0YXJnZXQ6IFwiZWJpYWFpcjNcIlxyXG4vLyB9KShcImhlaWdodDoyMCU7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7XCIsIGZsZXhDZW50ZXIsIFwiO1wiLCBvblN0YXRlLCBcIjtwb2ludGVyLWV2ZW50czphbGw7XCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZvb3RlciA9IHN0eWxlZC5kaXZgXHJcbiAgICBoZWlnaHQ6MjAlO1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGRpc3BsYXk6ZmxleDtcclxuICAgICR7ZmxleENlbnRlcn07XHJcbiAgICAke29uU3RhdGV9O1xyXG4gICAgcG9pbnRlci1ldmVudHM6YWxsO1xyXG5gXHJcblxyXG4vLyBleHBvcnQgdmFyIG9mZlN0YXRlID0gLyojX19QVVJFX18qL2NzcyhIZWFkZXIsIFwie3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDAlKTtvcGFjaXR5OjA7fVwiLCBGb290ZXIsIFwie3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpO29wYWNpdHk6MDt9XCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IG9mZlN0YXRlID0gY3NzYFxyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGhlaWdodDo4MCU7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWZsb3c6Y29sdW1uO1xyXG4gICAgJHtmbGV4Q2VudGVyfTtcclxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xyXG4gICAgJHtvblN0YXRlfTtcclxuICAgIHBvaW50ZXItZXZlbnRzOmFsbDtcclxuICAgIHRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xMDAlKTtcclxuICAgIG9wYWNpdHk6MDtcclxuICAgIGhlaWdodDoyMCU7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgJHtmbGV4Q2VudGVyfTtcclxuICAgICR7b25TdGF0ZX07XHJcbiAgICBwb2ludGVyLWV2ZW50czphbGw7XHJcbiAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMDAlKTtcclxuICAgIG9wYWNpdHk6MDtcclxuYFxyXG5cclxuLy8gZXhwb3J0IHZhciBDb250YWluZXIgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwiZGl2XCIsIHtcclxuLy8gICB0YXJnZXQ6IFwiZWJpYWFpcjRcIlxyXG4vLyB9KShcInBvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7b3ZlcmZsb3c6aGlkZGVuO2NvbG9yOlwiLCBwYWxldHRlLnByaW1hcnksIFwiO1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gICAgcG9zaXRpb246cmVsYXRpdmU7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgaGVpZ2h0OjEwMCU7XHJcbiAgICBvdmVyZmxvdzpoaWRkZW47XHJcbiAgICBjb2xvcjoke3BhbGV0dGUucHJpbWFyeX07XHJcbmBcclxuXHJcbi8vIGV4cG9ydCB2YXIgTG9nbyA9IC8qI19fUFVSRV9fKi9zdHlsZWQoXCJkaXZcIiwge1xyXG4vLyAgIHRhcmdldDogXCJlYmlhYWlyNVwiXHJcbi8vIH0pKFwiYW5pbWF0aW9uOlwiLCBmYWRlSW4sIFwiIFwiLCBUUkFOU0lUSU9OX1RJTUUgLyAyLCBcInMgbGluZWFyO1wiLCBiYWNrZ3JvdW5kSW1hZ2VDb3ZlciwgXCI7aGVpZ2h0OjIwJTttYXgtaGVpZ2h0Ojc1cHg7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtAbWVkaWEgKG1pbi13aWR0aDpcIiwgVEFCTEVUX01JTl9XSURUSCwgXCJweCl7bWF4LWhlaWdodDoxNTBweDt9XCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvZ28gPSBzdHlsZWQuZGl2YFxyXG4gICAgYW5pbWF0aW9uOiAke2ZhZGVJbn0sICR7IFRSQU5TSVRJT05fVElNRSAgLyAyIH1zIGxpbmVhcjtcclxuICAgICR7YmFja2dyb3VuZEltYWdlQ292ZXJ9O1xyXG4gICAgaGVpZ2h0OjgwJTtcclxuICAgIG1heC1oZWlnaHQ6NjAwcHg7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1zaXplOmNvbnRhaW47XHJcbiAgICBcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiR7VEFCTEVUX01JTl9XSURUSH1weCl7XHJcbiAgICAgICAgbWF4LWhlaWdodDo2MDBweDtcclxuICAgIH1cclxuYFxyXG5cclxuLy8gZXhwb3J0IHZhciBQb3dlcmVkQnkgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwiZGl2XCIsIHtcclxuLy8gICB0YXJnZXQ6IFwiZWJpYWFpcjZcIlxyXG4vLyB9KShcImFuaW1hdGlvbjpcIiwgZmFkZUluLCBcIiBcIiwgVFJBTlNJVElPTl9USU1FIC8gMiwgXCJzIGxpbmVhcjtoZWlnaHQ6XCIsIEZPT1RFUl9IRUlHSFQsIFwicHg7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7XCIsIGZsZXhDZW50ZXIsIFwiO2ZvbnQtZmFtaWx5OlJvYm90bztmb250LXNpemU6MTRweDtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MDtsZWZ0OjA7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuMik7aW1ne21hcmdpbi1sZWZ0OjEwcHg7bWF4LWhlaWdodDpcIiwgRk9PVEVSX0hFSUdIVCwgXCJweDt3aWR0aDphdXRvO31cIik7XHJcblxyXG5leHBvcnQgY29uc3QgUG93ZXJlZEJ5ID0gc3R5bGVkLmRpdmBcclxuICAgIGFuaW1hdGlvbjogJHtmYWRlSW59ICR7VFJBTlNJVElPTl9USU1FIC8gMn1zIGxpbmVhcjtcclxuICAgIGhlaWdodDoke0ZPT1RFUl9IRUlHSFR9cHg7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgZGlzcGxheTpmbGV4O1xyXG4gICAgJHtmbGV4Q2VudGVyfTtcclxuICAgIGZvbnQtZmFtaWx5OlJvYm90bztcclxuICAgIGZvbnQtc2l6ZToxNHB4O1xyXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAgICBib3R0b206MDtcclxuICAgIGxlZnQ6MDtcclxuICAgIGJhY2tncm91bmQ6cmdiYSgwLDAsMCwwLjIpO1xyXG4gICAgaW1nIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDoxMHB4O1xyXG4gICAgICAgIG1heC1oZWlnaHQ6JHtGT09URVJfSEVJR0hUfXB4O1xyXG4gICAgICAgIHdpZHRoOmF1dG87XHJcbiAgICB9XHJcbmBcclxuXHJcbi8vIGV4cG9ydCB2YXIgR2FtZU5hbWUgPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwiZGl2XCIsIHtcclxuLy8gICB0YXJnZXQ6IFwiZWJpYWFpcjdcIlxyXG4vLyB9KShcIm1hcmdpbi10b3A6MTZweDtmb250LWZhbWlseTpSb2JvdG87Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNHB4O0BtZWRpYSAobWluLXdpZHRoOlwiLCBUQUJMRVRfTUlOX1dJRFRILCBcInB4KXtmb250LXNpemU6MjRweDt9QG1lZGlhIGFsbCBhbmQgKG9yaWVudGF0aW9uOnBvcnRyYWl0KXttYXJnaW4tYm90dG9tOjgwcHg7fVwiKTtcclxuXHJcblxyXG5leHBvcnQgY29uc3QgR2FtZU5hbWUgPSBzdHlsZWQuZGl2YFxyXG4gICAgbWFyZ2luLXRvcDoxNnB4O1xyXG4gICAgZm9udC1mYW1pbHk6Um9ib3RvO1xyXG4gICAgZm9udC13ZWlnaHQ6NTAwO1xyXG4gICAgZm9udC1zaXplOjE0cHg7XHJcbiAgICBcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiR7VEFCTEVUX01JTl9XSURUSH1weCl7XHJcbiAgICAgICAgZm9udC1zaXplOjI0cHg7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIEBtZWRpYSBhbGwgYW5kIChvcmllbnRhdGlvbjpwb3J0cmFpdCl7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTo4MHB4O1xyXG4gICAgfVxyXG5gXHJcblxyXG4vLyBleHBvcnQgdmFyIEltYWdlID0gLyojX19QVVJFX18qL3N0eWxlZChcImRpdlwiLCB7XHJcbi8vICAgdGFyZ2V0OiBcImViaWFhaXI4XCJcclxuLy8gfSkoXCJhbmltYXRpb246XCIsIGZhZGVJbiwgXCIgXCIsIFRSQU5TSVRJT05fVElNRSAvIDIsIFwicyBsaW5lYXI7XCIsIGJhY2tncm91bmRJbWFnZUNvdmVyLCBcIjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt6LWluZGV4Oi0xO1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBJbWFnZSA9IHN0eWxlZC5kaXZgXHJcbiAgICBhbmltYXRpb246ICR7ZmFkZUlufSAgJHtUUkFOU0lUSU9OX1RJTUUgLyAyfXMgbGluZWFyO1xyXG4gICAgJHtiYWNrZ3JvdW5kSW1hZ2VDb3Zlcn07XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgaGVpZ2h0OjEwMCU7XHJcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcclxuICAgIHRvcDowO1xyXG4gICAgbGVmdDowO1xyXG4gICAgei1pbmRleDotMTtcclxuYFxyXG5cclxuLy8gdmFyIHB1bHNlQW5pbWF0aW9uID0gLyojX19QVVJFX18qL2tleWZyYW1lcyhcIjAle3RyYW5zZm9ybTpzY2FsZSgwLjkpO303MCV7dHJhbnNmb3JtOnNjYWxlKDEpO2JveC1zaGFkb3c6MCAwIDAgNTBweCByZ2JhKDI1NSwyNTUsMjU1LDApO30xMDAle3RyYW5zZm9ybTpzY2FsZSgwLjkpO2JveC1zaGFkb3c6MCAwIDAgMCByZ2JhKDI1NSwyNTUsMjU1LDApO31cIik7XHJcblxyXG5jb25zdCBwdWxzZUFuaW1hdGlvbiA9IGtleWZyYW1lc2BcclxuICAgIDAle3RyYW5zZm9ybTpzY2FsZSgwLjkpO31cclxuICAgIDcwJXt0cmFuc2Zvcm06c2NhbGUoMSk7Ym94LXNoYWRvdzowIDAgMCA1MHB4IHJnYmEoMjU1LDI1NSwyNTUsMCk7fVxyXG4gICAgMTAwJXt0cmFuc2Zvcm06c2NhbGUoMC45KTtib3gtc2hhZG93OjAgMCAwIDAgcmdiYSgyNTUsMjU1LDI1NSwwKTt9XHJcbmBcclxuXHJcbi8vIGV4cG9ydCB2YXIgUHVsc2VCdXR0b24gPSAvKiNfX1BVUkVfXyovc3R5bGVkKFwic3BhblwiLCB7XHJcbi8vICAgdGFyZ2V0OiBcImViaWFhaXI5XCJcclxuLy8gfSkoXCJib3JkZXItcmFkaXVzOjUwJTt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O2JhY2tncm91bmQ6I2ZmZjthbmltYXRpb246XCIsIHB1bHNlQW5pbWF0aW9uLCBcIiAxcyBpbmZpbml0ZTtib3gtc2hhZG93OjAgMCAwIDAgcmdiYSgyNTUsMjU1LDI1NSwwLjUpO3BvaW50ZXItZXZlbnRzOmFsbDtcIik7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IFB1bHNlQnV0dG9uID0gc3R5bGVkLnNwYW5gXHJcbiAgICBib3JkZXItcmFkaXVzOjUwJTtcclxuICAgIHdpZHRoOjUwcHg7XHJcbiAgICBoZWlnaHQ6NTBweDtcclxuICAgIGJhY2tncm91bmQ6I2ZmZjtcclxuICAgIGFuaW1hdGlvbjogJHtwdWxzZUFuaW1hdGlvbn0gMXMgaW5maW5pdGU7XHJcbiAgICBib3gtc2hhZG93OjAgMCAwIDAgcmdiYSgyNTUsMjU1LDI1NSwwLjUpO1xyXG4gICAgcG9pbnRlci1ldmVudHM6YWxsO1xyXG5gXHJcblxyXG5IZWFkZXIuZGlzcGxheU5hbWUgPSAnSGVhZGVyJztcclxuRm9vdGVyLmRpc3BsYXlOYW1lID0gJ0Zvb3Rlcic7XHJcbkNvbnRhaW5lci5kaXNwbGF5TmFtZSA9ICdDb250YWluZXInO1xyXG5Mb2dvLmRpc3BsYXlOYW1lID0gJ0xvZ28nO1xyXG5Qb3dlcmVkQnkuZGlzcGxheU5hbWUgPSAnUG93ZXJlZEJ5JztcclxuR2FtZU5hbWUuZGlzcGxheU5hbWUgPSAnR2FtZU5hbWUnO1xyXG5JbWFnZS5kaXNwbGF5TmFtZSA9ICdJbWFnZSc7Il19 */\",\n  toString: _EMOTION_STRINGIFIED_CSS_ERROR__\n});\n\n// export var MobileAnimationWrapper = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair2\"\n// })(\"position:absolute;bottom:calc(\", FOOTER_HEIGHT, \"px + 10%);display:flex;\", flexCenter, \";flex-flow:column nowrap;@media all and (orientation:landscape){position:relative;top:\", FOOTER_HEIGHT, \"px;bottom:0;}\");\n\nconst MobileAnimationWrapper = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux77\",\n  label: \"MobileAnimationWrapper\"\n})(\"position:absolute;bottom:calc(\", FOOTER_HEIGHT, \"px + 10%);display:flex;\", flexCenter, \";flex-flow:column nowrap;@media all and (orientation:landscape){position:relative;top:\", FOOTER_HEIGHT, \"px;bottom:0;}\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var Footer = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair3\"\n// })(\"height:20%;width:100%;display:flex;\", flexCenter, \";\", onState, \";pointer-events:all;\");\n\nconst Footer = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux76\",\n  label: \"Footer\"\n})(\"height:20%;width:100%;display:flex;\", flexCenter, \";\", onState, \";pointer-events:all;\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var offState = /*#__PURE__*/css(Header, \"{transform:translateY(-100%);opacity:0;}\", Footer, \"{transform:translateY(100%);opacity:0;}\");\n\nconst offState = /*#__PURE__*/(0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.css)(\"width:100%;height:80%;display:flex;flex-flow:column;\", flexCenter, \";position:relative;\", onState, \";pointer-events:all;transform:translateY(-100%);opacity:0;height:20%;width:100%;display:flex;\", flexCenter, \";\", onState, \";pointer-events:all;transform:translateY(100%);opacity:0;\" + ( false ? 0 : \";label:offState;\"),  false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n\n// export var Container = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair4\"\n// })(\"position:relative;width:100%;height:100%;overflow:hidden;color:\", palette.primary, \";\");\n\nconst Container = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux75\",\n  label: \"Container\"\n})(\"position:relative;width:100%;height:100%;overflow:hidden;color:\", palette.primary, \";\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var Logo = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair5\"\n// })(\"animation:\", fadeIn, \" \", TRANSITION_TIME / 2, \"s linear;\", backgroundImageCover, \";height:20%;max-height:75px;width:100%;background-size:contain;@media (min-width:\", TABLET_MIN_WIDTH, \"px){max-height:150px;}\");\n\nconst Logo = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux74\",\n  label: \"Logo\"\n})(\"animation:\", fadeIn, \",\", TRANSITION_TIME / 2, \"s linear;\", backgroundImageCover, \";height:80%;max-height:600px;width:100%;background-size:contain;@media (min-width:\", _constants_es__WEBPACK_IMPORTED_MODULE_1__.TABLET_MIN_WIDTH, \"px){max-height:600px;}\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var PoweredBy = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair6\"\n// })(\"animation:\", fadeIn, \" \", TRANSITION_TIME / 2, \"s linear;height:\", FOOTER_HEIGHT, \"px;width:100%;display:flex;\", flexCenter, \";font-family:Roboto;font-size:14px;position:absolute;bottom:0;left:0;background:rgba(0,0,0,0.2);img{margin-left:10px;max-height:\", FOOTER_HEIGHT, \"px;width:auto;}\");\n\nconst PoweredBy = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux73\",\n  label: \"PoweredBy\"\n})(\"animation:\", fadeIn, \" \", TRANSITION_TIME / 2, \"s linear;height:\", FOOTER_HEIGHT, \"px;width:100%;display:flex;\", flexCenter, \";font-family:Roboto;font-size:14px;position:absolute;bottom:0;left:0;background:rgba(0,0,0,0.2);img{margin-left:10px;max-height:\", FOOTER_HEIGHT, \"px;width:auto;}\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var GameName = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair7\"\n// })(\"margin-top:16px;font-family:Roboto;font-weight:500;font-size:14px;@media (min-width:\", TABLET_MIN_WIDTH, \"px){font-size:24px;}@media all and (orientation:portrait){margin-bottom:80px;}\");\n\nconst GameName = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux72\",\n  label: \"GameName\"\n})(\"margin-top:16px;font-family:Roboto;font-weight:500;font-size:14px;@media (min-width:\", _constants_es__WEBPACK_IMPORTED_MODULE_1__.TABLET_MIN_WIDTH, \"px){font-size:24px;}@media all and (orientation:portrait){margin-bottom:80px;}\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// export var Image = /*#__PURE__*/styled(\"div\", {\n//   target: \"ebiaair8\"\n// })(\"animation:\", fadeIn, \" \", TRANSITION_TIME / 2, \"s linear;\", backgroundImageCover, \";width:100%;height:100%;position:absolute;top:0;left:0;z-index:-1;\");\n\nconst Image = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",  false ? 0 : {\n  target: \"e1g8yux71\",\n  label: \"Image\"\n})(\"animation:\", fadeIn, \" \", TRANSITION_TIME / 2, \"s linear;\", backgroundImageCover, \";width:100%;height:100%;position:absolute;top:0;left:0;z-index:-1;\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\n\n// var pulseAnimation = /*#__PURE__*/keyframes(\"0%{transform:scale(0.9);}70%{transform:scale(1);box-shadow:0 0 0 50px rgba(255,255,255,0);}100%{transform:scale(0.9);box-shadow:0 0 0 0 rgba(255,255,255,0);}\");\n\nconst pulseAnimation = (0,_emotion_react__WEBPACK_IMPORTED_MODULE_4__.keyframes)`\n    0%{transform:scale(0.9);}\n    70%{transform:scale(1);box-shadow:0 0 0 50px rgba(255,255,255,0);}\n    100%{transform:scale(0.9);box-shadow:0 0 0 0 rgba(255,255,255,0);}\n`;\n\n// export var PulseButton = /*#__PURE__*/styled(\"span\", {\n//   target: \"ebiaair9\"\n// })(\"border-radius:50%;width:50px;height:50px;background:#fff;animation:\", pulseAnimation, \" 1s infinite;box-shadow:0 0 0 0 rgba(255,255,255,0.5);pointer-events:all;\");\n\nconst PulseButton = /*#__PURE__*/(0,_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"span\",  false ? 0 : {\n  target: \"e1g8yux70\",\n  label: \"PulseButton\"\n})(\"border-radius:50%;width:50px;height:50px;background:#fff;animation:\", pulseAnimation, \" 1s infinite;box-shadow:0 0 0 0 rgba(255,255,255,0.5);pointer-events:all;\" + ( false ? 0 : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));\nHeader.displayName = 'Header';\nFooter.displayName = 'Footer';\nContainer.displayName = 'Container';\nLogo.displayName = 'Logo';\nPoweredBy.displayName = 'PoweredBy';\nGameName.displayName = 'GameName';\nImage.displayName = 'Image';\n\n//# sourceURL=webpack://tykhe-electron-apps-roulette/./src/renderer/roulette/player/tykhe/bootstrap/components/Preloader/style.js?");

/***/ })

}]);